// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package gfxutils.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * https://stackoverflow.com/questions/34318650/color-blending-per-pixel
 */
public class ja_bufferedimage_fill_rgba extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __obj_bufferedimage;
	private gfxutils.proxies.BufferedImage obj_bufferedimage;
	private java.lang.Long r;
	private java.lang.Long g;
	private java.lang.Long b;
	private java.lang.Long a;

	public ja_bufferedimage_fill_rgba(IContext context, IMendixObject obj_bufferedimage, java.lang.Long r, java.lang.Long g, java.lang.Long b, java.lang.Long a)
	{
		super(context);
		this.__obj_bufferedimage = obj_bufferedimage;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.obj_bufferedimage = __obj_bufferedimage == null ? null : gfxutils.proxies.BufferedImage.initialize(getContext(), __obj_bufferedimage);

		// BEGIN USER CODE
		java.lang.Boolean ret=false;
		try{
			java.awt.image.BufferedImage bi=
				gfxutils.support.BufferedImageStorage
					.getInstance()
					.getBufferedImage(
						obj_bufferedimage.getMendixObject().getValue(
							this.getContext(),
							"_Id"
						)
					)
				;
				int w=bi.getWidth();
				int h=bi.getHeight();
				for(int i=0;i<w;i++){
					for(int j=0;j<h;j++){
						int col=blendPixelsrgb(r.intValue(),g.intValue(),b.intValue(),a.intValue()/255.0,bi.getRGB(i,j));
						bi.setRGB(
							i,
							j,
							col
						);
					}
				}
				ret=true;
		}catch(Exception e){
				//com.mendix.core.Core.getLogger(this.toString()).error(e.toString());//verbosity!!!
				ret =false;
		}
		return ret;


		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ja_bufferedimage_fill_rgba";
	}

	// BEGIN EXTRA CODE
	public static int rgbToHex(int r, int g, int b) {
		//return (1048576 * r) + (255 * g) + b;
		return (r<<16)|(g<<8)|b;
	}
	public static int argbToHex(int a,int r, int g, int b) {
		return (a<<24)|(r<<16)|(g<<8)|b;
	}

	public static int getAlpha(int argb) {
		int alpha=(argb >> 24) & 0xFF;
		return alpha;
	}

	public static int getRed(int argb) {
		//int red = Math.floorDiv(color, 1048576);
		int red = (argb >> 16) & 0xFF;
		return red;
	}
	public static int getGreen(int argb) {
		//int green = Math.floorDiv(color % 65536, 256);
		int green = (argb >> 8) & 0xFF;
		return green;
	}
	public static int getBlue(int argb) {
		//int blue = Math.floorDiv(color % 1048576, 256);
		int blue= argb & 0xFF;
		return blue;
	}
	public static int blendPixelsrgb(int r, int g, int b, double alpha, int bgPixel) {   
		int blendedRed = (int)Math.round(alpha * r + (1.0 - alpha) * getRed(bgPixel));
		int blendedGreen = (int)Math.round(alpha * g + (1.0 - alpha) * getGreen(bgPixel));
		int blendedBlue = (int)Math.round(alpha * b + (1.0 - alpha) * getBlue(bgPixel));
		return rgbToHex(blendedRed, blendedGreen, blendedBlue);
	}
	public static int blendPixelsargb(int r, int g, int b, double alpha, int bgPixel) {   
		int blendedRed = (int)Math.round(alpha * r + (1.0 - alpha) * getRed(bgPixel));
		int blendedGreen = (int)Math.round(alpha * g + (1.0 - alpha) * getGreen(bgPixel));
		int blendedBlue = (int)Math.round(alpha * b + (1.0 - alpha) * getBlue(bgPixel));
		int blendedAlpha = 255;//(int)Math.round(alphalpha * b + (1.0 - alpha) * getBlue(bgPixel));//todo
		return argbToHex(blendedAlpha,blendedRed, blendedGreen, blendedBlue);
	}
	// END EXTRA CODE
}
